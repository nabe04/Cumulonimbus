//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CameraCB
// {
//
//   float4x4 camera_view_matrix;       // Offset:    0 Size:    64 [unused]
//   float4x4 camera_projection_matrix; // Offset:   64 Size:    64 [unused]
//   float4x4 camera_view_projection_matrix;// Offset:  128 Size:    64
//   float4x4 camera_inv_view_matrix;   // Offset:  192 Size:    64 [unused]
//   float4x4 camera_inv_projection_matrix;// Offset:  256 Size:    64 [unused]
//   float4x4 camera_inv_view_projection_matrix;// Offset:  320 Size:    64 [unused]
//   float3 camera_position;            // Offset:  384 Size:    12 [unused]
//   float camera_distance_from_origin; // Offset:  396 Size:     4 [unused]
//   float3 camera_at;                  // Offset:  400 Size:    12 [unused]
//   float camera_near_z;               // Offset:  412 Size:     4 [unused]
//   float3 camera_up;                  // Offset:  416 Size:    12 [unused]
//   float camera_far_z;                // Offset:  428 Size:     4 [unused]
//   float3 camera_right;               // Offset:  432 Size:    12 [unused]
//   float camera_fov;                  // Offset:  444 Size:     4 [unused]
//   float3 camera_front;               // Offset:  448 Size:    12 [unused]
//   float camera_aspect;               // Offset:  460 Size:     4 [unused]
//   float camera_width;                // Offset:  464 Size:     4 [unused]
//   float camera_height;               // Offset:  468 Size:     4 [unused]
//   float2 camera_padding;             // Offset:  472 Size:     8 [unused]
//
// }
//
// cbuffer TransformCB
// {
//
//   float4x4 bone_transforms[128];     // Offset:    0 Size:  8192
//   float4x4 transform_matrix;         // Offset: 8192 Size:    64 [unused]
//   float4x4 scaling_matrix;           // Offset: 8256 Size:    64 [unused]
//   float4x4 rotation_matrix;          // Offset: 8320 Size:    64 [unused]
//   float4x4 translation_matrix;       // Offset: 8384 Size:    64 [unused]
//
// }
//
// cbuffer SingleColorCB
// {
//
//   float4 single_color;               // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CameraCB                          cbuffer      NA          NA            cb1      1 
// TransformCB                       cbuffer      NA          NA            cb3      1 
// SingleColorCB                     cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// W_POSITION               0   xyzw        1     NONE   float   xyzw
// WVP_POSITION             0   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TANGENT                  0   xyz         4     NONE   float   xyz 
// BI_NORMAL                0   xyz         5     NONE   float   xyz 
// COLOR                    0   xyzw        6     NONE   float   xyzw
// TEXCOORD                 0   xy          7     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB1[12], immediateIndexed
dcl_constantbuffer CB3[512], dynamicIndexed
dcl_constantbuffer CB10[1], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_output o7.xy
dcl_temps 9
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; 
//   v2.x <- vin.texcoord0.x; v2.y <- vin.texcoord0.y; 
//   v3.x <- vin.bone_weights.x; v3.y <- vin.bone_weights.y; v3.z <- vin.bone_weights.z; v3.w <- vin.bone_weights.w; 
//   v4.x <- vin.bone_indices.x; v4.y <- vin.bone_indices.y; v4.z <- vin.bone_indices.z; v4.w <- vin.bone_indices.w; 
//   o7.x <- <main return value>.texcoord0.x; o7.y <- <main return value>.texcoord0.y; 
//   o6.x <- <main return value>.color.x; o6.y <- <main return value>.color.y; o6.z <- <main return value>.color.z; o6.w <- <main return value>.color.w; 
//   o5.x <- <main return value>.binormal.x; o5.y <- <main return value>.binormal.y; o5.z <- <main return value>.binormal.z; 
//   o4.x <- <main return value>.tangent.x; o4.y <- <main return value>.tangent.y; o4.z <- <main return value>.tangent.z; 
//   o3.x <- <main return value>.normal.x; o3.y <- <main return value>.normal.y; o3.z <- <main return value>.normal.z; 
//   o2.x <- <main return value>.wvp_position.x; o2.y <- <main return value>.wvp_position.y; o2.z <- <main return value>.wvp_position.z; o2.w <- <main return value>.wvp_position.w; 
//   o1.x <- <main return value>.w_position.x; o1.y <- <main return value>.w_position.y; o1.z <- <main return value>.w_position.z; o1.w <- <main return value>.w_position.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 21 "D:\Desktop\Cumulonimbus\Shader\single_color_vs.hlsl"
itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- vout.wvp_position.x; r0.y <- vout.wvp_position.y; r0.z <- vout.wvp_position.z; r0.w <- vout.wvp_position.w

#line 23
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- world_pos.x; r1.y <- world_pos.y; r1.z <- world_pos.z

#line 24
itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- normal.x; r2.y <- normal.y; r2.z <- normal.z

#line 25
mov r1.w, l(0)  // r1.w <- i
mov r3.xyz, r2.zxyz  // r3.x <- normal.z; r3.y <- normal.x; r3.z <- normal.y
mov r4.x, r1.x  // r4.x <- world_pos.x
mov r4.y, r1.y  // r4.y <- world_pos.y
mov r4.z, r1.z  // r4.z <- world_pos.z
mov r2.w, r1.w  // r2.w <- i
loop 
  ilt r3.w, r2.w, l(4)
  breakc_z r3.w

#line 30
  dp4 r3.w, v3.xyzw, icb[r2.w + 0].xyzw
  and r5.xyzw, v4.xyzw, icb[r2.w + 4].xyzw
  or r5.xy, r5.ywyy, r5.xzxx
  or r5.x, r5.y, r5.x
  imul null, r5.x, r5.x, l(4)
  mul r5.yzw, v0.xxxx, cb3[r5.x + 0].xxyz
  mul r6.xyz, v0.yyyy, cb3[r5.x + 1].xyzx
  add r5.yzw, r5.yyzw, r6.xxyz
  mul r6.xyz, v0.zzzz, cb3[r5.x + 2].xyzx
  add r5.yzw, r5.yyzw, r6.xxyz
  mul r6.xyz, v0.wwww, cb3[r5.x + 3].xyzx
  add r5.xyz, r5.yzwy, r6.xyzx
  mul r5.xyz, r3.wwww, r5.xyzx
  add r4.xyz, r5.xyzx, r4.xyzx

#line 31
  dp4 r3.w, v3.xyzw, icb[r2.w + 0].xyzw
  and r5.xyzw, v4.xyzw, icb[r2.w + 4].xyzw
  or r5.xy, r5.ywyy, r5.xzxx
  or r5.x, r5.y, r5.x
  imul null, r5.x, r5.x, l(4)
  itof r5.y, l(0)
  mul r6.xyz, v1.xxxx, cb3[r5.x + 0].xyzx
  mul r7.xyz, v1.yyyy, cb3[r5.x + 1].xyzx
  add r6.xyz, r6.xyzx, r7.xyzx
  mul r7.xyz, v1.zzzz, cb3[r5.x + 2].xyzx
  add r6.xyz, r6.xyzx, r7.xyzx
  mul r5.xyz, r5.yyyy, cb3[r5.x + 3].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r5.xyz, r3.wwww, r5.xyzx
  add r3.xyz, r3.xyzx, r5.zxyz

#line 32
  iadd r2.w, r2.w, l(1)
endloop 

#line 34
mul r1.xyzw, r4.xxxx, cb1[8].xyzw
mul r2.xyzw, r4.yyyy, cb1[9].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, r4.zzzz, cb1[10].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, cb1[11].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- wvp_pos.x; r1.y <- wvp_pos.y; r1.z <- wvp_pos.z; r1.w <- wvp_pos.w

#line 36
mov r1.xyzw, r1.xyzw  // r1.x <- vout.position.x; r1.y <- vout.position.y; r1.z <- vout.position.z; r1.w <- vout.position.w

#line 37
mov r4.w, l(1.000000)
mov r4.xyzw, r4.xyzw  // r4.x <- vout.w_position.x; r4.y <- vout.w_position.y; r4.z <- vout.w_position.z; r4.w <- vout.w_position.w

#line 38
dp3 r2.x, r3.xyzx, r3.xyzx
rsq r2.x, r2.x
mul r2.xyz, r2.xxxx, r3.yzxy  // r2.x <- vout.normal.x; r2.y <- vout.normal.y; r2.z <- vout.normal.z

#line 39
mov r5.xy, v2.xyxx  // r5.x <- vout.texcoord0.x; r5.y <- vout.texcoord0.y

#line 40
mov r6.xyzw, cb10[0].xyzw  // r6.x <- vout.color.x; r6.y <- vout.color.y; r6.z <- vout.color.z; r6.w <- vout.color.w

#line 43
mov r7.xyz, l(0.001000,0,1.000000,0)  // r7.x <- vy.z; r7.y <- vy.x; r7.z <- vy.y

#line 44
mov r3.xyz, r3.xyzx  // r3.x <- vz.z; r3.y <- vz.x; r3.z <- vz.y

#line 46
mul r8.xyz, r3.xyzx, r7.zxyz
mul r7.xyz, r3.zxyz, r7.xyzx
mov r7.xyz, -r7.xyzx
add r7.xyz, r7.xyzx, r8.xyzx  // r7.x <- vx.x; r7.y <- vx.y; r7.z <- vx.z

#line 47
dp3 r2.w, r7.xyzx, r7.xyzx
rsq r2.w, r2.w
mul r7.xyz, r2.wwww, r7.xyzx

#line 48
mul r8.xyz, r3.zxyz, r7.zxyz
mul r3.xyz, r3.xyzx, r7.yzxy
mov r3.xyz, -r3.xyzx
add r3.xyz, r3.xyzx, r8.xyzx  // r3.x <- vy.x; r3.y <- vy.y; r3.z <- vy.z

#line 49
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx

#line 50
mov r7.xyz, r7.xyzx  // r7.x <- vout.tangent.x; r7.y <- vout.tangent.y; r7.z <- vout.tangent.z

#line 51
mov r3.xyz, r3.xyzx  // r3.x <- vout.binormal.x; r3.y <- vout.binormal.y; r3.z <- vout.binormal.z

#line 53
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r4.xyzw
mov o2.xyzw, r0.xyzw
mov o6.xyzw, r6.xyzw
mov o3.xyz, r2.xyzx
mov o4.xyz, r7.xyzx
mov o5.xyz, r3.xyzx
mov o7.xy, r5.xyxx
ret 
// Approximately 85 instruction slots used
