//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CB_SorbelFilter
// {
//
//   float ajust_filter_carnel;         // Offset:    0 Size:     4
//   float padding[3];                  // Offset:   16 Size:    36 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// linear_sampler_state              sampler      NA          NA             s0      1 
// diffuse_texture                   texture  float4          2d             t0      1 
// CB_SorbelFilter                   cbuffer      NA          NA            cb6      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB6[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
dcl_indexableTemp x0[9], 4
dcl_indexableTemp x1[9], 4
dcl_indexableTemp x2[9], 4
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- texcoord.x; v1.y <- texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w; 
//   x0 <- filter_horizontal; x1 <- filter_vertical; x2 <- offset
//
#line 9 "C:\Users\ryoki\Desktop\Cumulonimbus\Shader\outline_extraction_ps.hlsl"
itof r0.xyzw, l(1, 0, -1, 2)
itof r1.xyzw, l(0, -1, 1, 0)
itof r2.x, l(-1)
mov x0[0].x, r0.x
mov x0[1].x, r0.y
mov x0[2].x, r0.z
mov x0[3].x, r0.w
mov x0[4].x, r1.x
mov x0[5].x, r1.y
mov x0[6].x, r1.z
mov x0[7].x, r1.w
mov x0[8].x, r2.x

#line 16
itof r0.xyzw, l(1, 2, 1, 0)
itof r1.xyzw, l(0, 0, -1, -2)
itof r2.x, l(-1)
mov x1[0].x, r0.x
mov x1[1].x, r0.y
mov x1[2].x, r0.z
mov x1[3].x, r0.w
mov x1[4].x, r1.x
mov x1[5].x, r1.y
mov x1[6].x, r1.z
mov x1[7].x, r1.w
mov x1[8].x, r2.x

#line 23
mov r0.x, l(0)  // r0.x <- mip_level

#line 24
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.xy, r0.x, t0.xyzw
mov r0.x, r0.x  // r0.x <- width
mov r0.y, r0.y  // r0.y <- height

#line 27
mov x2[0].xy, l(-1.000000,-1.000000,0,0)

#line 28
mov x2[1].xy, l(0,-1.000000,0,0)

#line 29
mov x2[2].xy, l(1.000000,-1.000000,0,0)

#line 30
mov x2[3].xy, l(-1.000000,0,0,0)

#line 31
mov x2[4].xy, l(0,0,0,0)

#line 32
mov x2[5].xy, l(1.000000,0,0,0)

#line 33
mov x2[6].xy, l(-1.000000,1.100000,0,0)

#line 34
mov x2[7].xy, l(0,1.000000,0,0)

#line 35
mov x2[8].xy, l(1.000000,1.000000,0,0)

#line 37
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- horizontal_color.x; r1.y <- horizontal_color.y; r1.z <- horizontal_color.z

#line 38
itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- vertical_color.x; r2.y <- vertical_color.y; r2.z <- vertical_color.z

#line 40
mov r0.z, l(0)  // r0.z <- i
mov r3.xyz, r1.xyzx  // r3.x <- horizontal_color.x; r3.y <- horizontal_color.y; r3.z <- horizontal_color.z
mov r4.xyz, r2.xyzx  // r4.x <- vertical_color.x; r4.y <- vertical_color.y; r4.z <- vertical_color.z
mov r0.w, r0.z  // r0.w <- i
loop 
  ilt r1.w, r0.w, l(9)
  breakc_z r1.w

#line 42
  mov r1.w, x2[r0.w + 0].x
  utof r2.w, r0.x
  div r5.x, r1.w, r2.w
  mov r1.w, x2[r0.w + 0].y
  utof r2.w, r0.y
  div r5.y, r1.w, r2.w
  add r5.xy, r5.xyxx, v1.xyxx
  sample_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t0.xyzw, s0
  mov r1.w, x0[r0.w + 0].x
  mul r5.xyz, r1.wwww, r5.xyzx
  mul r5.xyz, r5.xyzx, cb6[0].xxxx
  add r3.xyz, r3.xyzx, r5.xyzx

#line 43
  mov r1.w, x2[r0.w + 0].x
  utof r2.w, r0.x
  div r5.x, r1.w, r2.w
  mov r1.w, x2[r0.w + 0].y
  utof r2.w, r0.y
  div r5.y, r1.w, r2.w
  add r5.xy, r5.xyxx, v1.xyxx
  sample_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t0.xyzw, s0
  mov r1.w, x1[r0.w + 0].x
  mul r5.xyz, r1.wwww, r5.xyzx
  mul r5.xyz, r5.xyzx, cb6[0].xxxx
  add r4.xyz, r4.xyzx, r5.xyzx

#line 44
  iadd r0.w, r0.w, l(1)
endloop 

#line 46
mul r0.xyz, r3.xyzx, r3.xyzx
mul r1.xyz, r4.xyzx, r4.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
sqrt r0.xyz, r0.xyzx  // r0.x <- fragment_color.x; r0.y <- fragment_color.y; r0.z <- fragment_color.z

#line 48
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 79 instruction slots used
