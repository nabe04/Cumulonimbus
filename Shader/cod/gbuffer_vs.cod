//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CameraCB
// {
//
//   float4x4 camera_view_matrix;       // Offset:    0 Size:    64 [unused]
//   float4x4 camera_projection_matrix; // Offset:   64 Size:    64 [unused]
//   float4x4 camera_view_projection_matrix;// Offset:  128 Size:    64
//   float3 camera_position;            // Offset:  192 Size:    12 [unused]
//   float camera_distance_from_origin; // Offset:  204 Size:     4 [unused]
//   float3 camera_at;                  // Offset:  208 Size:    12 [unused]
//   float camera_near_z;               // Offset:  220 Size:     4 [unused]
//   float3 camera_up;                  // Offset:  224 Size:    12 [unused]
//   float camera_far_z;                // Offset:  236 Size:     4 [unused]
//   float3 camera_right;               // Offset:  240 Size:    12 [unused]
//   float camera_fov;                  // Offset:  252 Size:     4 [unused]
//   float3 camera_front;               // Offset:  256 Size:    12 [unused]
//   float camera_aspect;               // Offset:  268 Size:     4 [unused]
//   float camera_width;                // Offset:  272 Size:     4 [unused]
//   float camera_height;               // Offset:  276 Size:     4 [unused]
//   float2 camera_padding;             // Offset:  280 Size:     8 [unused]
//
// }
//
// cbuffer TransformCB
// {
//
//   float4x4 bone_transforms[128];     // Offset:    0 Size:  8192
//   float4x4 transform_matrix;         // Offset: 8192 Size:    64 [unused]
//   float4x4 scaling_matrix;           // Offset: 8256 Size:    64 [unused]
//   float4x4 rotation_matrix;          // Offset: 8320 Size:    64 [unused]
//   float4x4 translation_matrix;       // Offset: 8384 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CameraCB                          cbuffer      NA          NA            cb1      1 
// TransformCB                       cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// W_POSITION               0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BI_NORMAL                0   xyz         4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[12], immediateIndexed
dcl_constantbuffer CB3[512], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xy
dcl_temps 3
ishl r0.xyzw, v4.xyzw, l(2, 2, 2, 2)
mul r1.xyz, v0.yyyy, cb3[r0.y + 1].xyzx
mad r1.xyz, cb3[r0.y + 0].xyzx, v0.xxxx, r1.xyzx
mad r1.xyz, cb3[r0.y + 2].xyzx, v0.zzzz, r1.xyzx
mad r1.xyz, cb3[r0.y + 3].xyzx, v0.wwww, r1.xyzx
mul r1.xyz, r1.xyzx, v3.yyyy
mul r2.xyz, v0.yyyy, cb3[r0.x + 1].xyzx
mad r2.xyz, cb3[r0.x + 0].xyzx, v0.xxxx, r2.xyzx
mad r2.xyz, cb3[r0.x + 2].xyzx, v0.zzzz, r2.xyzx
mad r2.xyz, cb3[r0.x + 3].xyzx, v0.wwww, r2.xyzx
mad r1.xyz, v3.xxxx, r2.xyzx, r1.xyzx
mul r2.xyz, v0.yyyy, cb3[r0.z + 1].xyzx
mad r2.xyz, cb3[r0.z + 0].xyzx, v0.xxxx, r2.xyzx
mad r2.xyz, cb3[r0.z + 2].xyzx, v0.zzzz, r2.xyzx
mad r2.xyz, cb3[r0.z + 3].xyzx, v0.wwww, r2.xyzx
mad r1.xyz, v3.zzzz, r2.xyzx, r1.xyzx
mul r2.xyz, v0.yyyy, cb3[r0.w + 1].xyzx
mad r2.xyz, cb3[r0.w + 0].xyzx, v0.xxxx, r2.xyzx
mad r2.xyz, cb3[r0.w + 2].xyzx, v0.zzzz, r2.xyzx
mad r2.xyz, cb3[r0.w + 3].xyzx, v0.wwww, r2.xyzx
mad r1.xyz, v3.wwww, r2.xyzx, r1.xyzx
mul r2.xyzw, r1.yyyy, cb1[9].xyzw
mad r2.xyzw, cb1[8].xyzw, r1.xxxx, r2.xyzw
mad r2.xyzw, cb1[10].xyzw, r1.zzzz, r2.xyzw
mov o1.xyz, r1.xyzx
add o0.xyzw, r2.xyzw, cb1[11].xyzw
mov o1.w, l(1.000000)
mul r1.xyz, v1.yyyy, cb3[r0.y + 1].xyzx
mad r1.xyz, cb3[r0.y + 0].xyzx, v1.xxxx, r1.xyzx
mad r1.xyz, cb3[r0.y + 2].xyzx, v1.zzzz, r1.xyzx
mul r1.xyz, r1.xyzx, v3.yyyy
mul r2.xyz, v1.yyyy, cb3[r0.x + 1].xyzx
mad r2.xyz, cb3[r0.x + 0].xyzx, v1.xxxx, r2.xyzx
mad r2.xyz, cb3[r0.x + 2].xyzx, v1.zzzz, r2.xyzx
mad r1.xyz, v3.xxxx, r2.xyzx, r1.xyzx
mul r2.xyz, v1.yyyy, cb3[r0.z + 1].xyzx
mad r2.xyz, cb3[r0.z + 0].xyzx, v1.xxxx, r2.xyzx
mad r0.xyz, cb3[r0.z + 2].xyzx, v1.zzzz, r2.xyzx
mad r0.xyz, v3.zzzz, r0.xyzx, r1.xyzx
mul r1.xyz, v1.yyyy, cb3[r0.w + 1].xyzx
mad r1.xyz, cb3[r0.w + 0].xyzx, v1.xxxx, r1.xyzx
mad r1.xyz, cb3[r0.w + 2].xyzx, v1.zzzz, r1.xyzx
mad r0.xyz, v3.wwww, r1.xyzx, r0.xyzx
mov o2.xyz, r0.xyzx
mul r1.xyz, r0.yzxy, l(0.001000, 0.000000, 1.000000, 0.000000)
mad r1.xyz, r0.zxyz, l(1.000000, 0.001000, 0.000000, 0.000000), -r1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mov o3.xyz, r1.xyzx
mul r2.xyz, r0.zxyz, r1.yzxy
mad r0.xyz, r0.yzxy, r1.zxyz, -r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul o4.xyz, r0.wwww, r0.xyzx
mov o5.xy, v2.xyxx
ret 
// Approximately 57 instruction slots used
