//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer DebugPrimitiveCB
// {
//
//   float4x4 primitive_world_transform_mat;// Offset:    0 Size:    64
//   float4 color;                      // Offset:   64 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// DebugPrimitiveCB                  cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB10[4], immediateIndexed
dcl_input v0.xyzw
dcl_output_siv o0.xyzw, position
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 13 "D:\Desktop\Cumulonimbus\Shader\debug_primitive_vs.hlsl"
mul r0.xyz, v0.xxxx, cb10[0].xyzx
mul r1.xyz, v0.yyyy, cb10[1].xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, v0.zzzz, cb10[2].xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, v0.wwww, cb10[3].xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- world_pos.x; r0.y <- world_pos.y; r0.z <- world_pos.z

#line 15
mov r0.xyz, r0.xyzx  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z
mov r0.w, l(1.000000)  // r0.w <- vout.position.w

#line 16
mov o0.xyzw, r0.xyzw
ret 
// Approximately 11 instruction slots used
