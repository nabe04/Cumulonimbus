//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CameraCB
// {
//
//   float4x4 camera_view_matrix;       // Offset:    0 Size:    64 [unused]
//   float4x4 camera_projection_matrix; // Offset:   64 Size:    64 [unused]
//   float4x4 camera_view_projection_matrix;// Offset:  128 Size:    64
//   float3 camera_position;            // Offset:  192 Size:    12 [unused]
//   float camera_distance_from_origin; // Offset:  204 Size:     4 [unused]
//   float3 camera_at;                  // Offset:  208 Size:    12 [unused]
//   float camera_near_z;               // Offset:  220 Size:     4 [unused]
//   float3 camera_up;                  // Offset:  224 Size:    12 [unused]
//   float camera_far_z;                // Offset:  236 Size:     4 [unused]
//   float3 camera_right;               // Offset:  240 Size:    12 [unused]
//   float camera_fov;                  // Offset:  252 Size:     4 [unused]
//   float3 camera_front;               // Offset:  256 Size:    12 [unused]
//   float camera_aspect;               // Offset:  268 Size:     4 [unused]
//   float camera_width;                // Offset:  272 Size:     4 [unused]
//   float camera_height;               // Offset:  276 Size:     4 [unused]
//   float2 camera_padding;             // Offset:  280 Size:     8 [unused]
//
// }
//
// cbuffer TransformCB
// {
//
//   float4x4 bone_transforms[128];     // Offset:    0 Size:  8192
//   float4x4 transform_matrix;         // Offset: 8192 Size:    64 [unused]
//
// }
//
// cbuffer MaterialCB
// {
//
//   struct ShaderMaterial
//   {
//       
//       float4 base_color;             // Offset:    0
//       float4 emissive_color;         // Offset:   16
//       float roughness;               // Offset:   32
//       float reflectance;             // Offset:   36
//       float metalness;               // Offset:   40
//       int material_use_custom;       // Offset:   44
//
//   } material;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CameraCB                          cbuffer      NA          NA            cb1      1 
// TransformCB                       cbuffer      NA          NA            cb3      1 
// MaterialCB                        cbuffer      NA          NA            cb4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// W_POSITION               0   xyzw        1     NONE   float   xyzw
// WVP_POSITION             0   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TANGENT                  0   xyz         4     NONE   float   xyz 
// BI_NORMAL                0   xyz         5     NONE   float   xyz 
// COLOR                    0   xyzw        6     NONE   float   xyzw
// TEX_POSITION             0   xyz         7     NONE   float   xyz 
// TEXCOORD                 0   xy          8     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB1[12], immediateIndexed
dcl_constantbuffer CB3[512], dynamicIndexed
dcl_constantbuffer CB4[1], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_output o7.xyz
dcl_output o8.xy
dcl_temps 10
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; 
//   v2.x <- vin.texcoord0.x; v2.y <- vin.texcoord0.y; 
//   v3.x <- vin.bone_weights.x; v3.y <- vin.bone_weights.y; v3.z <- vin.bone_weights.z; v3.w <- vin.bone_weights.w; 
//   v4.x <- vin.bone_indices.x; v4.y <- vin.bone_indices.y; v4.z <- vin.bone_indices.z; v4.w <- vin.bone_indices.w; 
//   o8.x <- <main return value>.texcoord0.x; o8.y <- <main return value>.texcoord0.y; 
//   o7.x <- <main return value>.tex_position.x; o7.y <- <main return value>.tex_position.y; o7.z <- <main return value>.tex_position.z; 
//   o6.x <- <main return value>.color.x; o6.y <- <main return value>.color.y; o6.z <- <main return value>.color.z; o6.w <- <main return value>.color.w; 
//   o5.x <- <main return value>.binormal.x; o5.y <- <main return value>.binormal.y; o5.z <- <main return value>.binormal.z; 
//   o4.x <- <main return value>.tangent.x; o4.y <- <main return value>.tangent.y; o4.z <- <main return value>.tangent.z; 
//   o3.x <- <main return value>.normal.x; o3.y <- <main return value>.normal.y; o3.z <- <main return value>.normal.z; 
//   o2.x <- <main return value>.wvp_position.x; o2.y <- <main return value>.wvp_position.y; o2.z <- <main return value>.wvp_position.z; o2.w <- <main return value>.wvp_position.w; 
//   o1.x <- <main return value>.w_position.x; o1.y <- <main return value>.w_position.y; o1.z <- <main return value>.w_position.z; o1.w <- <main return value>.w_position.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 22 "D:\Desktop\Cumulonimbus\Shader\cook_torrance_vs.hlsl"
itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- vout.w_position.x; r0.y <- vout.w_position.y; r0.z <- vout.w_position.z; r0.w <- vout.w_position.w
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- vout.tangent.x; r1.y <- vout.tangent.y; r1.z <- vout.tangent.z
itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- vout.binormal.x; r2.y <- vout.binormal.y; r2.z <- vout.binormal.z
itof r3.xyz, l(0, 0, 0, 0)  // r3.x <- vout.tex_position.x; r3.y <- vout.tex_position.y; r3.z <- vout.tex_position.z

#line 24
itof r4.xyz, l(0, 0, 0, 0)  // r4.x <- world_pos.x; r4.y <- world_pos.y; r4.z <- world_pos.z

#line 25
itof r5.xyz, l(0, 0, 0, 0)  // r5.x <- normal.x; r5.y <- normal.y; r5.z <- normal.z

#line 26
mov r1.w, l(0)  // r1.w <- i
mov r6.xyz, r5.xyzx  // r6.x <- normal.x; r6.y <- normal.y; r6.z <- normal.z
mov r7.x, r4.x  // r7.x <- world_pos.x
mov r7.y, r4.y  // r7.y <- world_pos.y
mov r7.z, r4.z  // r7.z <- world_pos.z
mov r2.w, r1.w  // r2.w <- i
loop 
  ilt r3.w, r2.w, l(4)
  breakc_z r3.w

#line 31
  dp4 r3.w, v3.xyzw, icb[r2.w + 0].xyzw
  and r8.xyzw, v4.xyzw, icb[r2.w + 4].xyzw
  or r8.xy, r8.ywyy, r8.xzxx
  or r4.w, r8.y, r8.x
  imul null, r4.w, r4.w, l(4)
  mul r8.xyz, v0.xxxx, cb3[r4.w + 0].xyzx
  mul r9.xyz, v0.yyyy, cb3[r4.w + 1].xyzx
  add r8.xyz, r8.xyzx, r9.xyzx
  mul r9.xyz, v0.zzzz, cb3[r4.w + 2].xyzx
  add r8.xyz, r8.xyzx, r9.xyzx
  mul r9.xyz, v0.wwww, cb3[r4.w + 3].xyzx
  add r8.xyz, r8.xyzx, r9.xyzx
  mul r8.xyz, r3.wwww, r8.xyzx
  add r7.xyz, r8.xyzx, r7.xyzx

#line 32
  dp4 r3.w, v3.xyzw, icb[r2.w + 0].xyzw
  and r8.xyzw, v4.xyzw, icb[r2.w + 4].xyzw
  or r8.xy, r8.ywyy, r8.xzxx
  or r4.w, r8.y, r8.x
  imul null, r4.w, r4.w, l(4)
  itof r5.w, l(0)
  mul r8.xyz, v1.xxxx, cb3[r4.w + 0].xyzx
  mul r9.xyz, v1.yyyy, cb3[r4.w + 1].xyzx
  add r8.xyz, r8.xyzx, r9.xyzx
  mul r9.xyz, v1.zzzz, cb3[r4.w + 2].xyzx
  add r8.xyz, r8.xyzx, r9.xyzx
  mul r9.xyz, r5.wwww, cb3[r4.w + 3].xyzx
  add r8.xyz, r8.xyzx, r9.xyzx
  mul r8.xyz, r3.wwww, r8.xyzx
  add r6.xyz, r6.xyzx, r8.xyzx

#line 33
  iadd r2.w, r2.w, l(1)
endloop 

#line 35
mul r4.xyzw, r7.xxxx, cb1[8].xyzw
mul r5.xyzw, r7.yyyy, cb1[9].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r7.zzzz, cb1[10].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb1[11].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r4.xyzw, r4.xyzw, r5.xyzw  // r4.x <- wvp_pos.x; r4.y <- wvp_pos.y; r4.z <- wvp_pos.z; r4.w <- wvp_pos.w

#line 37
mov r4.xyzw, r4.xyzw  // r4.x <- vout.position.x; r4.y <- vout.position.y; r4.z <- vout.position.z; r4.w <- vout.position.w

#line 38
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, r6.xyzx  // r5.x <- vout.normal.x; r5.y <- vout.normal.y; r5.z <- vout.normal.z

#line 39
mov r6.xy, v2.xyxx  // r6.x <- vout.texcoord0.x; r6.y <- vout.texcoord0.y

#line 40
mov r7.xyzw, cb4[0].xyzw  // r7.x <- vout.color.x; r7.y <- vout.color.y; r7.z <- vout.color.z; r7.w <- vout.color.w

#line 41
mov r4.xyzw, r4.xyzw  // r4.x <- vout.wvp_position.x; r4.y <- vout.wvp_position.y; r4.z <- vout.wvp_position.z; r4.w <- vout.wvp_position.w

#line 43
mov o0.xyzw, r4.xyzw
mov o1.xyzw, r0.xyzw
mov o2.xyzw, r4.xyzw
mov o6.xyzw, r7.xyzw
mov o3.xyz, r5.xyzx
mov o4.xyz, r1.xyzx
mov o5.xyz, r2.xyzx
mov o7.xyz, r3.xyzx
mov o8.xy, r6.xyxx
ret 
// Approximately 70 instruction slots used
