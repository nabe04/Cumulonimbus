//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBTranslation
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   row_major float4x4 boneTransforms[128];// Offset:   64 Size:  8192
//   row_major float4x4 transform_matrix;// Offset: 8256 Size:    64 [unused]
//
// }
//
// cbuffer CBMesh
// {
//
//   float4 m_Color;                    // Offset:    0 Size:    16
//   float4 m_Ka;                       // Offset:   16 Size:    16 [unused]
//   float4 m_Kd;                       // Offset:   32 Size:    16 [unused]
//   float4 m_Ks;                       // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer CBLight
// {
//
//   float4 light_position;             // Offset:    0 Size:    16
//   float4 light_direction;            // Offset:   16 Size:    16 [unused]
//   float4 light_ambient;              // Offset:   32 Size:    16 [unused]
//   float4 light_color;                // Offset:   48 Size:    16 [unused]
//   row_major float4x4 view_matrix;    // Offset:   64 Size:    64 [unused]
//   row_major float4x4 light_perspective_projection_matrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 light_perspective_view_projection_matrix;// Offset:  192 Size:    64 [unused]
//   float light_orthographic_view_width;// Offset:  256 Size:     4 [unused]
//   float light_orthographic_view_height;// Offset:  260 Size:     4 [unused]
//   float light_orthographic_near_z;   // Offset:  264 Size:     4 [unused]
//   float light_orthographic_far_z;    // Offset:  268 Size:     4 [unused]
//   row_major float4x4 light_orthographic_projection_matrix;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 light_orthographic_view_projection_matrix;// Offset:  336 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBTranslation                     cbuffer      NA          NA            cb0      1 
// CBMesh                            cbuffer      NA          NA            cb1      1 
// CBLight                           cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// WORLD_POSITION           0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
// EYE_VECTOR               0   xyz         5     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[516], dynamicIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xy
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; 
//   v2.x <- vin.texcoord.x; v2.y <- vin.texcoord.y; 
//   v3.x <- vin.boneWeights.x; v3.y <- vin.boneWeights.y; v3.z <- vin.boneWeights.z; v3.w <- vin.boneWeights.w; 
//   v4.x <- vin.boneIndices.x; v4.y <- vin.boneIndices.y; v4.z <- vin.boneIndices.z; v4.w <- vin.boneIndices.w; 
//   o5.x <- <main return value>.eyeVector.x; o5.y <- <main return value>.eyeVector.y; o5.z <- <main return value>.eyeVector.z; 
//   o4.x <- <main return value>.color.x; o4.y <- <main return value>.color.y; o4.z <- <main return value>.color.z; o4.w <- <main return value>.color.w; 
//   o3.x <- <main return value>.texcoord.x; o3.y <- <main return value>.texcoord.y; 
//   o2.x <- <main return value>.normal.x; o2.y <- <main return value>.normal.y; o2.z <- <main return value>.normal.z; 
//   o1.x <- <main return value>.worldPos.x; o1.y <- <main return value>.worldPos.y; o1.z <- <main return value>.worldPos.z; o1.w <- <main return value>.worldPos.w; 
//   o0.x <- <main return value>.wvpPos.x; o0.y <- <main return value>.wvpPos.y; o0.z <- <main return value>.wvpPos.z; o0.w <- <main return value>.wvpPos.w
//
#line 8 "D:\チEクトップ\Cumulonimbus\Shader\spot_light_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- worldPos.x; r0.y <- worldPos.y; r0.z <- worldPos.z

#line 10
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- worldPos.x; r1.y <- worldPos.y; r1.z <- worldPos.z
mov r2.x, r0.w  // r2.x <- i
loop 
  ilt r2.y, r2.x, l(4)
  breakc_z r2.y

#line 13
  dp4 r2.y, v3.xyzw, icb[r2.x + 0].xyzw
  and r3.xyzw, v4.xyzw, icb[r2.x + 4].xyzw
  or r2.zw, r3.yyyw, r3.xxxz
  or r2.z, r2.w, r2.z
  imul null, r2.z, r2.z, l(4)
  mul r3.xyz, v0.xxxx, cb0[r2.z + 4].xyzx
  mul r4.xyz, v0.yyyy, cb0[r2.z + 5].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v0.zzzz, cb0[r2.z + 6].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v0.wwww, cb0[r2.z + 7].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r2.yzw, r2.yyyy, r3.xxyz
  add r1.xyz, r1.xyzx, r2.yzwy

#line 15
  iadd r2.x, r2.x, l(1)
endloop 

#line 17
mul r0.xyzw, r1.xxxx, cb0[0].xyzw
mul r2.xyzw, r1.yyyy, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
mul r2.xyzw, r1.zzzz, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
mul r2.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- wvpPos.x; r0.y <- wvpPos.y; r0.z <- wvpPos.z; r0.w <- wvpPos.w

#line 19
mov r0.xyzw, r0.xyzw  // r0.x <- vout.wvpPos.x; r0.y <- vout.wvpPos.y; r0.z <- vout.wvpPos.z; r0.w <- vout.wvpPos.w

#line 20
mov r1.xyz, r1.xyzx  // r1.x <- vout.worldPos.x; r1.y <- vout.worldPos.y; r1.z <- vout.worldPos.z
mov r1.w, l(1.000000)  // r1.w <- vout.worldPos.w

#line 21
mov r2.xyz, v1.xyzx  // r2.x <- vout.normal.x; r2.y <- vout.normal.y; r2.z <- vout.normal.z

#line 22
mov r3.xy, v2.xyxx  // r3.x <- vout.texcoord.x; r3.y <- vout.texcoord.y

#line 23
mov r4.xyzw, cb1[0].xyzw  // r4.x <- vout.color.x; r4.y <- vout.color.y; r4.z <- vout.color.z; r4.w <- vout.color.w

#line 24
mov r5.xyz, -r0.xyzx
add r5.xyz, r5.xyzx, cb2[0].xyzx  // r5.x <- vout.eyeVector.x; r5.y <- vout.eyeVector.y; r5.z <- vout.eyeVector.z

#line 26
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o4.xyzw, r4.xyzw
mov o2.xyz, r2.xyzx
mov o5.xyz, r5.xyzx
mov o3.xy, r3.xyxx
ret 
// Approximately 45 instruction slots used
