//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBMesh
// {
//
//   float4 m_Color;                    // Offset:    0 Size:    16 [unused]
//   float4 m_Ka;                       // Offset:   16 Size:    16
//   float4 m_Kd;                       // Offset:   32 Size:    16 [unused]
//   float4 m_Ks;                       // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer CBLight
// {
//
//   float4 light_position;             // Offset:    0 Size:    16
//   float4 light_direction;            // Offset:   16 Size:    16 [unused]
//   float4 light_ambient;              // Offset:   32 Size:    16 [unused]
//   float4 light_color;                // Offset:   48 Size:    16
//   row_major float4x4 light_view_matrix;// Offset:   64 Size:    64 [unused]
//   row_major float4x4 light_perspective_projection_matrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 light_perspective_view_projection_matrix;// Offset:  192 Size:    64 [unused]
//   float light_orthographic_view_width;// Offset:  256 Size:     4 [unused]
//   float light_orthographic_view_height;// Offset:  260 Size:     4 [unused]
//   float light_orthographic_near_z;   // Offset:  264 Size:     4 [unused]
//   float light_orthographic_far_z;    // Offset:  268 Size:     4 [unused]
//   row_major float4x4 light_orthographic_projection_matrix;// Offset:  272 Size:    64 [unused]
//   row_major float4x4 light_orthographic_view_projection_matrix;// Offset:  336 Size:    64 [unused]
//
// }
//
// cbuffer CB
// {
//
//   struct SpotLight
//   {
//       
//       float index;                   // Offset:    0
//       float range;                   // Offset:    4
//       float type;                    // Offset:    8
//       float innerCone;               // Offset:   12
//       float outerCone;               // Offset:   16
//       float dumy0;                   // Offset:   20
//       float dumy1;                   // Offset:   24
//       float dumy2;                   // Offset:   28
//       float4 position;               // Offset:   32
//       float4 color;                  // Offset:   48
//       float4 direction;              // Offset:   64
//
//   } spotLights[32];                  // Offset:    0 Size:  2560
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// defaultSampler                    sampler      NA          NA             s0      1 
// diffuseTexture                    texture  float4          2d             t0      1 
// CBMesh                            cbuffer      NA          NA            cb1      1 
// CBLight                           cbuffer      NA          NA            cb2      1 
// CB                                cbuffer      NA          NA            cb6      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// WORLD_POSITION           0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
// EYE_VECTOR               0   xyz         5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[2], immediateIndexed
dcl_constantbuffer CB2[4], immediateIndexed
dcl_constantbuffer CB6[160], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyzw
dcl_output o0.xyzw
dcl_temps 8
dp3 r0.x, cb2[3].xyzx, cb2[3].xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, cb2[3].xyzx
add r1.xyz, -v1.xyzx, cb2[0].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
dp3 r1.w, v2.xyzx, v2.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, v2.xyzx
dp3 r1.w, r3.xyzx, -r0.xyzx
max r1.w, r1.w, l(0.000000)
mad r0.xyz, r1.xyzx, r0.wwww, -r0.xyzx
dp3 r3.w, r0.xyzx, r0.xyzx
rsq r3.w, r3.w
mul r0.xyz, r0.xyzx, r3.wwww
dp3 r0.x, r0.xyzx, r3.xyzx
max r0.x, r0.x, l(0.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.x
mul r0.y, r0.x, r0.x
mul r0.y, r0.y, r0.y
mul r0.x, r0.y, r0.x
mov r4.xyz, l(0,0,0,0)
mov r5.xyz, l(0,0,0,0)
mov r0.y, l(0)
loop 
  ige r0.z, r0.y, l(32)
  breakc_nz r0.z
  imul null, r0.z, r0.y, l(5)
  eq r3.w, l(0.000000), cb6[r0.z + 0].z
  if_nz r3.w
    iadd r3.w, r0.y, l(1)
    mov r0.y, r3.w
    continue 
  endif 
  add r6.xyz, v1.xyzx, -cb6[r0.z + 2].xyzx
  dp3 r3.w, r6.xyzx, r6.xyzx
  sqrt r4.w, r3.w
  lt r4.w, cb6[r0.z + 0].y, r4.w
  if_nz r4.w
    iadd r4.w, r0.y, l(1)
    mov r0.y, r4.w
    continue 
  endif 
  dp3 r4.w, cb6[r0.z + 4].xyzx, cb6[r0.z + 4].xyzx
  rsq r4.w, r4.w
  mul r7.xyz, r4.wwww, cb6[r0.z + 4].xyzx
  rsq r3.w, r3.w
  mul r6.xyz, r3.wwww, r6.xyzx
  dp3 r3.w, r6.xyzx, r7.xyzx
  add r4.w, cb6[r0.z + 0].w, -cb6[r0.z + 1].x
  add r3.w, -r3.w, cb6[r0.z + 0].w
  div r3.w, r3.w, r4.w
  add_sat r3.w, -r3.w, l(1.000000)
  dp3 r4.w, r3.xyzx, -r6.xyzx
  max r4.w, r4.w, l(0.000000)
  mul r7.xyz, r4.wwww, cb6[r0.z + 3].xyzx
  mad r4.xyz, r7.xyzx, r3.wwww, r4.xyzx
  mad r6.xyz, r1.xyzx, r0.wwww, -r6.xyzx
  dp3 r4.w, r6.xyzx, r6.xyzx
  rsq r4.w, r4.w
  mul r6.xyz, r4.wwww, r6.xyzx
  dp3 r4.w, r6.xyzx, r3.xyzx
  max r4.w, r4.w, l(0.000000)
  mul r4.w, r4.w, r4.w
  mul r4.w, r4.w, r4.w
  mul r5.w, r4.w, r4.w
  mul r5.w, r5.w, r5.w
  mul r4.w, r4.w, r5.w
  mul r6.xyz, r4.wwww, cb6[r0.z + 3].xyzx
  mad r5.xyz, r6.xyzx, r3.wwww, r5.xyzx
  iadd r0.y, r0.y, l(1)
endloop 
mul r2.xyzw, r2.xyzw, v4.xyzw
mad r0.yzw, cb2[3].xxyz, r1.wwww, cb1[1].xxyz
mad r0.xyz, r0.xxxx, cb2[3].xyzx, r0.yzwy
add r0.xyz, r4.xyzx, r0.xyzx
add r0.xyz, r5.xyzx, r0.xyzx
mov r0.w, l(1.000000)
mul o0.xyzw, r0.xyzw, r2.xyzw
ret 
// Approximately 82 instruction slots used
