//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer LightCB
// {
//
//   float3 light_position;             // Offset:    0 Size:    12 [unused]
//   float orthographic_view_width;     // Offset:   12 Size:     4 [unused]
//   float3 light_direction;            // Offset:   16 Size:    12 [unused]
//   float orthographic_view_height;    // Offset:   28 Size:     4 [unused]
//   float3 light_color;                // Offset:   32 Size:    12 [unused]
//   float orthographic_near_z;         // Offset:   44 Size:     4 [unused]
//   float orthographic_far_z;          // Offset:   48 Size:     4 [unused]
//   float3 light_padding;              // Offset:   52 Size:    12 [unused]
//   float4x4 light_view_matrix;        // Offset:   64 Size:    64
//   float4x4 light_perspective_projection_matrix;// Offset:  128 Size:    64 [unused]
//   float4x4 light_perspective_view_projection_matrix;// Offset:  192 Size:    64 [unused]
//   float4x4 light_orthographic_projection_matrix;// Offset:  256 Size:    64 [unused]
//   float4x4 light_orthographic_view_projection_matrix;// Offset:  320 Size:    64
//
// }
//
// cbuffer TransformCB
// {
//
//   float4x4 bone_transforms[128];     // Offset:    0 Size:  8192
//   float4x4 transform_matrix;         // Offset: 8192 Size:    64 [unused]
//   float4x4 scaling_matrix;           // Offset: 8256 Size:    64 [unused]
//   float4x4 rotation_matrix;          // Offset: 8320 Size:    64 [unused]
//   float4x4 translation_matrix;       // Offset: 8384 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LightCB                           cbuffer      NA          NA            cb2      1 
// TransformCB                       cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float       
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// WV_POSITION              0   xyzw        1     NONE   float   xyzw
// WVP_POSITION             0   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB2[24], immediateIndexed
dcl_constantbuffer CB3[512], dynamicIndexed
dcl_input v0.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; 
//   v2.x <- vin.texcoord0.x; v2.y <- vin.texcoord0.y; 
//   v3.x <- vin.bone_weights.x; v3.y <- vin.bone_weights.y; v3.z <- vin.bone_weights.z; v3.w <- vin.bone_weights.w; 
//   v4.x <- vin.bone_indices.x; v4.y <- vin.bone_indices.y; v4.z <- vin.bone_indices.z; v4.w <- vin.bone_indices.w; 
//   o2.x <- <main return value>.wvp_position.x; o2.y <- <main return value>.wvp_position.y; o2.z <- <main return value>.wvp_position.z; o2.w <- <main return value>.wvp_position.w; 
//   o1.x <- <main return value>.wv_position.x; o1.y <- <main return value>.wv_position.y; o1.z <- <main return value>.wv_position.z; o1.w <- <main return value>.wv_position.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 17 "D:\Desktop\Cumulonimbus\Shader\variance_shadow_depth_extraction_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- world_pos.x; r0.y <- world_pos.y; r0.z <- world_pos.z

#line 19
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- world_pos.x; r1.y <- world_pos.y; r1.z <- world_pos.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, l(4)
  breakc_z r2.x

#line 24
  dp4 r2.x, v3.xyzw, icb[r1.w + 0].xyzw
  and r3.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r2.yz, r3.yywy, r3.xxzx
  or r2.y, r2.z, r2.y
  imul null, r2.y, r2.y, l(4)
  mul r3.xyz, v0.xxxx, cb3[r2.y + 0].xyzx
  mul r4.xyz, v0.yyyy, cb3[r2.y + 1].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v0.zzzz, cb3[r2.y + 2].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r2.yzw, v0.wwww, cb3[r2.y + 3].xxyz
  add r2.yzw, r2.yyzw, r3.xxyz
  mul r2.xyz, r2.yzwy, r2.xxxx
  add r1.xyz, r1.xyzx, r2.xyzx

#line 26
  iadd r1.w, r1.w, l(1)
endloop 

#line 28
mul r0.xyzw, r1.xxxx, cb2[20].xyzw
mul r2.xyzw, r1.yyyy, cb2[21].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
mul r2.xyzw, r1.zzzz, cb2[22].xyzw
add r0.xyzw, r0.xyzw, r2.xyzw
mul r2.xyzw, cb2[23].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r0.xyzw, r0.xyzw, r2.xyzw  // r0.x <- wvp_pos.x; r0.y <- wvp_pos.y; r0.z <- wvp_pos.z; r0.w <- wvp_pos.w

#line 29
mul r2.xyzw, r1.xxxx, cb2[4].xyzw
mul r3.xyzw, r1.yyyy, cb2[5].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.zzzz, cb2[6].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r2.xyzw, cb2[7].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- wv_pos.x; r1.y <- wv_pos.y; r1.z <- wv_pos.z; r1.w <- wv_pos.w

#line 31
mov r0.xyzw, r0.xyzw  // r0.x <- vs_out.position.x; r0.y <- vs_out.position.y; r0.z <- vs_out.position.z; r0.w <- vs_out.position.w

#line 32
mov r0.xyzw, r0.xyzw  // r0.x <- vs_out.wvp_position.x; r0.y <- vs_out.wvp_position.y; r0.z <- vs_out.wvp_position.z; r0.w <- vs_out.wvp_position.w

#line 33
mov r1.xyzw, r1.xyzw  // r1.x <- vs_out.wv_position.x; r1.y <- vs_out.wv_position.y; r1.z <- vs_out.wv_position.z; r1.w <- vs_out.wv_position.w

#line 35
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xyzw, r0.xyzw
ret 
// Approximately 44 instruction slots used
