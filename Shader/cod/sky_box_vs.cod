//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBTranslation
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   row_major float4x4 boneTransforms[128];// Offset:   64 Size:  8192
//   row_major float4x4 transform_matrix;// Offset: 8256 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBTranslation                     cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float       
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// WORLD_POSITION           0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[516], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xy
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; 
//   v2.x <- vin.texcoord0.x; v2.y <- vin.texcoord0.y; 
//   v3.x <- vin.boneWeights.x; v3.y <- vin.boneWeights.y; v3.z <- vin.boneWeights.z; v3.w <- vin.boneWeights.w; 
//   v4.x <- vin.boneIndices.x; v4.y <- vin.boneIndices.y; v4.z <- vin.boneIndices.z; v4.w <- vin.boneIndices.w; 
//   o3.x <- <main return value>.texcoord0.x; o3.y <- <main return value>.texcoord0.y; 
//   o2.x <- <main return value>.normal.x; o2.y <- <main return value>.normal.y; o2.z <- <main return value>.normal.z; 
//   o1.x <- <main return value>.world_position.x; o1.y <- <main return value>.world_position.y; o1.z <- <main return value>.world_position.z; o1.w <- <main return value>.world_position.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 13 "C:\Users\ryoki\Desktop\Cumlonimbus\Shader\sky_box_vs.hlsl"
itof r0.xy, l(0, 0, 0, 0)  // r0.x <- vout.texcoord0.x; r0.y <- vout.texcoord0.y

#line 15
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- worldPos.x; r1.y <- worldPos.y; r1.z <- worldPos.z

#line 16
itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- normal.x; r2.y <- normal.y; r2.z <- normal.z

#line 17
mov r0.z, l(0)  // r0.z <- i
mov r3.xyz, r2.xyzx  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z
mov r4.x, r1.x  // r4.x <- worldPos.x
mov r4.y, r1.y  // r4.y <- worldPos.y
mov r4.z, r1.z  // r4.z <- worldPos.z
mov r0.w, r0.z  // r0.w <- i
loop 
  ilt r1.w, r0.w, l(4)
  breakc_z r1.w

#line 22
  dp4 r1.w, v3.xyzw, icb[r0.w + 0].xyzw
  and r5.xyzw, v4.xyzw, icb[r0.w + 4].xyzw
  or r5.xy, r5.ywyy, r5.xzxx
  or r2.w, r5.y, r5.x
  imul null, r2.w, r2.w, l(4)
  mul r5.xyz, v0.xxxx, cb0[r2.w + 4].xyzx
  mul r6.xyz, v0.yyyy, cb0[r2.w + 5].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, v0.zzzz, cb0[r2.w + 6].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, v0.wwww, cb0[r2.w + 7].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r5.xyz, r1.wwww, r5.xyzx
  add r4.xyz, r5.xyzx, r4.xyzx

#line 23
  dp4 r1.w, v3.xyzw, icb[r0.w + 0].xyzw
  itof r2.w, l(0)
  and r5.xyzw, v4.xyzw, icb[r0.w + 4].xyzw
  or r5.xy, r5.ywyy, r5.xzxx
  or r3.w, r5.y, r5.x
  imul null, r3.w, r3.w, l(4)
  mul r5.xyz, v1.xxxx, cb0[r3.w + 4].xyzx
  mul r6.xyz, v1.yyyy, cb0[r3.w + 5].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, v1.zzzz, cb0[r3.w + 6].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, r2.wwww, cb0[r3.w + 7].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r5.xyz, r1.wwww, r5.xyzx
  add r3.xyz, r3.xyzx, r5.xyzx

#line 24
  iadd r0.w, r0.w, l(1)
endloop 

#line 26
mul r1.xyz, r4.xxxx, cb0[0].xywx
mul r2.xyz, r4.yyyy, cb0[1].xywx
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.xyz, r4.zzzz, cb0[2].xywx
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.xyz, cb0[3].xywx, l(0.000000, 0.000000, 0.000000, 0.000000)
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- wvpPos.x; r1.y <- wvpPos.y; r1.z <- wvpPos.w

#line 28
mov r1.xyz, r1.xyzx  // r1.x <- vout.position.x; r1.y <- vout.position.y; r1.z <- vout.position.w

#line 29
mov r1.z, r1.z  // r1.z <- vout.position.z

#line 30
mov r4.w, l(1.000000)
mov r4.xyzw, r4.xyzw  // r4.x <- vout.world_position.x; r4.y <- vout.world_position.y; r4.z <- vout.world_position.z; r4.w <- vout.world_position.w

#line 31
mov r3.xyz, r3.xyzx  // r3.x <- vout.normal.x; r3.y <- vout.normal.y; r3.z <- vout.normal.z

#line 33
mov o0.xyw, r1.xyxz
mov o0.z, r1.z
mov o1.xyzw, r4.xyzw
mov o2.xyz, r3.xyzx
mov o3.xy, r0.xyxx
ret 
// Approximately 61 instruction slots used
